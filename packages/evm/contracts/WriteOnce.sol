// SPDX-License-Identifier: LGPL-3.0-only
pragma solidity >=0.8.17 <0.9.0;

library WriteOnce {
    /**
    @notice Stores `_data` and returns `pointer` as key for later retrieval
    @dev The pointer is a contract address with `_data` as code
    @param data to be written
    @return pointer Pointer to the written `data`
  */
    function store(bytes memory data) internal returns (address pointer) {
        // Append 00 to data so contract can't be called
        // Build init code
        bytes memory code = creationCodeFor(data);

        // Deploy contract using create
        assembly {
            pointer := create(0, add(code, 32), mload(code))
        }

        assert(pointer != address(0));
    }

    /**
    @notice Reads the contents of the `pointer` code as data, skips the first byte
    @dev The function is intended for reading pointers generated by `write`
    @param pointer to be read
    @return data read from `pointer` contract
  */
    function load(address pointer) internal view returns (bytes memory) {
        return codeAt(pointer, 1);
    }

    function codeAt(
        address pointer,
        uint256 start
    ) private view returns (bytes memory result) {
        unchecked {
            uint256 size;
            assembly {
                size := sub(extcodesize(pointer), start)
            }
            assert(size > 0);

            result = new bytes(size);

            assembly {
                extcodecopy(pointer, add(result, 0x20), start, size)
            }
        }
    }

    /**
    @notice Generate a creation code that results on a contract with `_code` as bytecode
    @param code The returning value of the resulting `creationCode`
    @return creationCode (constructor) for new contract
  */
    function creationCodeFor(
        bytes memory code
    ) private pure returns (bytes memory) {
        /*
      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size
      0x01    0x80         0x80        DUP1                size size
      0x02    0x60         0x600e      PUSH1 14            14 size size
      0x03    0x60         0x6000      PUSH1 00            0 14 size size
      0x04    0x39         0x39        CODECOPY            size
      0x05    0x60         0x6000      PUSH1 00            0 size
      0x06    0xf3         0xf3        RETURN
      <CODE>
    */

        return
            abi.encodePacked(
                hex"63",
                uint32(code.length + 1),
                hex"80_60_0E_60_00_39_60_00_F3",
                hex"00",
                code
            );
    }
}
